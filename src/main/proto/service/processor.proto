syntax = "proto3";

option java_package = "org.spin.proto.processor";
option java_multiple_files = true;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";

package processor;

message GetSystemInfoRequest {
	// empty request
}
message SystemInfo {
	// report service
	google.protobuf.Timestamp date_version = 1;
	string main_version = 2;
	string implementation_version = 3;
}

// Delete Batch Entity Request
message RunProcessorRequest {
	int32 id = 1;
	int32 client_id = 2;
}

message RunProcessorResponse {
	bool is_error = 1;
	string summary = 2;
	repeated ProcessorLog logs = 3;
}

//	BusinessProcess Log result
message ProcessorLog {
	int32 id = 1;
	string log = 2;
}

// The greeting service definition.
service Processors {
	// system information
	rpc GetSystemInfo(GetSystemInfoRequest) returns (SystemInfo) {
		option (google.api.http) = {
			get: "/v1/processors/system-info"
		};
	}

	// Accounting Processor
	rpc RunAccounting(RunProcessorRequest) returns (RunProcessorResponse) {
		option (google.api.http) = { post: "/v1/accounting/{client_id}/{id}" };
	}
	// Alert Processor
	rpc RunAlert(RunProcessorRequest) returns (RunProcessorResponse) {
		option (google.api.http) = { post: "/v1/alert/{client_id}/{id}" };
	}
	// Project Processor
	rpc RunProject(RunProcessorRequest) returns (RunProcessorResponse) {
		option (google.api.http) = { post: "/v1/project/{client_id}/{id}" };
	}
	// Request Processor
	rpc RunRequest(RunProcessorRequest) returns (RunProcessorResponse) {
		option (google.api.http) = { post: "/v1/request/{client_id}/{id}" };
	}
	// Scheduler Processor
	rpc RunScheduler(RunProcessorRequest) returns (RunProcessorResponse) {
		option (google.api.http) = { post: "/v1/scheduler/{client_id}/{id}" };
	}
	// Workflow Processor
	rpc RunWorkflow(RunProcessorRequest) returns (RunProcessorResponse) {
		option (google.api.http) = { post: "/v1/workflow/{client_id}/{id}" };
	}
}
